


SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;


CREATE EXTENSION IF NOT EXISTS "pg_net" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgsodium";






COMMENT ON SCHEMA "public" IS 'standard public schema';



CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";






CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";






CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";






CREATE OR REPLACE FUNCTION "public"."generate_url_identifier"() RETURNS "text"
    LANGUAGE "sql"
    AS $$
  select string_agg(
           substr(characters, (random() * length(characters) + 1)::integer, 1),
           ''
         )
  from (values('abcdefghijklmnopqrstuvwxyz0123456789-')) as symbols(characters)
  join generate_series(1, 6) on true;
$$;


ALTER FUNCTION "public"."generate_url_identifier"() OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."record_view"("objecttype" "text", "identifier" "text", "ip" "text", "useragent" "text") RETURNS "void"
    LANGUAGE "plpgsql"
    AS $$DECLARE
alias_id uuid;
qr_code_id uuid;
url_object_id int;

BEGIN
IF objectType = 'url_objects' THEN
  select id into url_object_id 
  from url_objects 
  where id = record_view.identifier::int;
END IF;

IF objectType = 'qr_codes' THEN
  select id into qr_code_id 
  from qr_codes 
  where id = record_view.identifier::uuid;
END IF;

IF objectType = 'aliases' THEN
  select id into alias_id 
  from aliases 
  where id = record_view.identifier::uuid;
END IF;

insert into visits (ip, user_agent, url_object_id, qr_code_id, alias_id)
values (ip, userAgent, url_object_id, qr_code_id, alias_id);
end;$$;


ALTER FUNCTION "public"."record_view"("objecttype" "text", "identifier" "text", "ip" "text", "useragent" "text") OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";


CREATE TABLE IF NOT EXISTS "public"."aliases" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "value" "text" DEFAULT ''::"text" NOT NULL,
    "url_object_id" bigint NOT NULL
);


ALTER TABLE "public"."aliases" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."qr_codes" (
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "settings" "json" DEFAULT '{}'::"json",
    "logo_path" "text",
    "url_object_id" bigint NOT NULL,
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL
);


ALTER TABLE "public"."qr_codes" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."url_objects" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "uuid" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "url" "text" DEFAULT ''::"text" NOT NULL,
    "enabled" boolean DEFAULT true NOT NULL,
    "user_id" "uuid" DEFAULT "auth"."uid"() NOT NULL,
    "identifier" character varying DEFAULT "public"."generate_url_identifier"() NOT NULL
);


ALTER TABLE "public"."url_objects" OWNER TO "postgres";


ALTER TABLE "public"."url_objects" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."url_objects_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."visits" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "url_object_id" bigint,
    "alias_id" "uuid",
    "ip" "text",
    "user_agent" "text",
    "qr_code_id" "uuid"
);


ALTER TABLE "public"."visits" OWNER TO "postgres";


COMMENT ON TABLE "public"."visits" IS 'analytics for URL visits.';



ALTER TABLE "public"."visits" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."visits_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



ALTER TABLE ONLY "public"."aliases"
    ADD CONSTRAINT "aliases_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."qr_codes"
    ADD CONSTRAINT "qr_codes_id_key" UNIQUE ("id");



ALTER TABLE ONLY "public"."url_objects"
    ADD CONSTRAINT "url_objects_identifier_key" UNIQUE ("identifier");



ALTER TABLE ONLY "public"."url_objects"
    ADD CONSTRAINT "url_objects_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."url_objects"
    ADD CONSTRAINT "url_objects_uuid_key" UNIQUE ("uuid");



ALTER TABLE ONLY "public"."visits"
    ADD CONSTRAINT "visits_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."aliases"
    ADD CONSTRAINT "aliases_url_object_id_fkey" FOREIGN KEY ("url_object_id") REFERENCES "public"."url_objects"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."qr_codes"
    ADD CONSTRAINT "qr_codes_url_object_id_fkey" FOREIGN KEY ("url_object_id") REFERENCES "public"."url_objects"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."url_objects"
    ADD CONSTRAINT "url_objects_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."visits"
    ADD CONSTRAINT "visits_alias_id_fkey" FOREIGN KEY ("alias_id") REFERENCES "public"."aliases"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."visits"
    ADD CONSTRAINT "visits_qr_code_id_fkey" FOREIGN KEY ("qr_code_id") REFERENCES "public"."qr_codes"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."visits"
    ADD CONSTRAINT "visits_url_object_id_fkey" FOREIGN KEY ("url_object_id") REFERENCES "public"."url_objects"("id") ON UPDATE CASCADE ON DELETE CASCADE;



CREATE POLICY "Enable read access for all users" ON "public"."aliases" FOR SELECT USING (true);



CREATE POLICY "Enable read access for all users" ON "public"."qr_codes" FOR SELECT USING (true);



CREATE POLICY "Enable read access for all users" ON "public"."url_objects" FOR SELECT USING (true);



ALTER TABLE "public"."aliases" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."qr_codes" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."url_objects" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."visits" ENABLE ROW LEVEL SECURITY;




ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";





GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";




















































































































































































GRANT ALL ON FUNCTION "public"."generate_url_identifier"() TO "postgres";
GRANT ALL ON FUNCTION "public"."generate_url_identifier"() TO "anon";
GRANT ALL ON FUNCTION "public"."generate_url_identifier"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."generate_url_identifier"() TO "service_role";



GRANT ALL ON FUNCTION "public"."record_view"("objecttype" "text", "identifier" "text", "ip" "text", "useragent" "text") TO "postgres";
GRANT ALL ON FUNCTION "public"."record_view"("objecttype" "text", "identifier" "text", "ip" "text", "useragent" "text") TO "anon";
GRANT ALL ON FUNCTION "public"."record_view"("objecttype" "text", "identifier" "text", "ip" "text", "useragent" "text") TO "authenticated";
GRANT ALL ON FUNCTION "public"."record_view"("objecttype" "text", "identifier" "text", "ip" "text", "useragent" "text") TO "service_role";


















GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."aliases" TO "postgres";
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."aliases" TO "anon";
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."aliases" TO "authenticated";
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."aliases" TO "service_role";



GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."qr_codes" TO "postgres";
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."qr_codes" TO "anon";
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."qr_codes" TO "authenticated";
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."qr_codes" TO "service_role";



GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."url_objects" TO "postgres";
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."url_objects" TO "anon";
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."url_objects" TO "authenticated";
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."url_objects" TO "service_role";



GRANT ALL ON SEQUENCE "public"."url_objects_id_seq" TO "postgres";
GRANT ALL ON SEQUENCE "public"."url_objects_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."url_objects_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."url_objects_id_seq" TO "service_role";



GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."visits" TO "postgres";
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."visits" TO "anon";
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."visits" TO "authenticated";
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."visits" TO "service_role";



GRANT ALL ON SEQUENCE "public"."visits_id_seq" TO "postgres";
GRANT ALL ON SEQUENCE "public"."visits_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."visits_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."visits_id_seq" TO "service_role";



ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO "service_role";































RESET ALL;
